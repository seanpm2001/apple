{-# LANGUAGE OverloadedStrings #-}

module Main (main) where

import           Control.Exception     (throw)
import qualified Data.ByteString       as BS
import qualified Data.ByteString.Lazy  as BSL
import           Data.Int              (Int64)
import           Foreign.Marshal.Alloc (allocaBytes)
import           Foreign.Ptr           (FunPtr, Ptr)
import           Foreign.Storable      (Storable (..))
import           Hs.A
import           Hs.FFI
import           Math.Hypergeometric   (erf, hypergeometric, ncdf)
import           Math.SpecialFunction  (agm, bessel1, chisqcdf, completeElliptic, gammaln, tcdf)
import           P
import           Test.Tasty
import           Test.Tasty.HUnit

hsEntropy :: Floating a => [a] -> a
hsEntropy xs = sum [ x * log x | x <- xs ]

kl :: Floating a => [a] -> [a] -> a
kl xs ys = sum [ x * log (x/y) | x <- xs, y <- ys ]

infixl 1 .?=

(.?=) :: (Show a, Ord a, Floating a) => a -> a -> Assertion
x .?= y = assertBool ("expected " ++ show y ++ ", got " ++ show x) ((x-y)/y<1e-15&&(y-x)/y<1e-15)

main :: IO ()
main = defaultMain $ testGroup "All" $ rTy:
#ifdef x86_64_HOST_ARCH
    [x64T]
#else
    [tyT]
#endif

rTy :: TestTree
rTy = testGroup "Regression tests"
    [ tyF "test/data/polymorphic.🍎"
    , tyF "math/gammaln.🍏"
    , tyF "test/examples/regress.🍎"
    , tyF "test/data/rank.🍎"
    , tyF "test/examples/weekMean.🍎"
    , tyF "test/examples/convolve.🍎"
    , tyF "test/examples/mul.🍏"
    , tyF "test/examples/offset.🍏"
    , tyF "test/examples/xor.🍎"
    ]

tyT :: TestTree
tyT = testGroup "Type system"
    [ tyF "test/examples/kl.🍎"
    , tyF "math/chisqcdf.🍎"
    , tyF "math/fcdf.🍎"
    , tyF "math/tcdf.🍎"
    , tyF "math/completeElliptic.🍎"
    , tyF "math/hypergeometric.🍏"
    , tyF "math/erf.🍏"
    , tyF "math/amgm.🍏"
    , tyS "[(+)/\\o 0 (irange 0 x 1)]"
    , tyS "((-)\\~)"
    ]

x64T :: TestTree
x64T = testGroup "x64"
    [ rfTest
    , testCase "entropy" $ do { res <- jitEntropy [0.25, 0.25, 0.5] ; res @?= hsEntropy [0.25, 0.25, 0.5] }
    , testCase "ℯ" $ do { res <- jitE 2.5 ; res @?= exp 2.5 }
    , testCase "ℯ_" $ do { (_, fp) <- funP "[e:(_x)]"; ff fp 1 @?= exp (-1) }
    , testCase "exp (series)" $ do { res <- jitExp 20 1 ; res .?= exp 1 }
    , testCase "Floats?" $ do { res <- jitFact 50 ; res @?= 3.0414093201713376e64 }
    , testCase "k-l" $ do { res <- jitKl [0.25, 0.25, 0.5] [0.66, 0.33, 0] ; res @?= kl [0.25, 0.25, 0.5] [0.66, 0.33, 0] }
    , testCase "gammaln" $ do { res <- gammaJit (-3.5) ; res @?= gammaln (-3.5) }
    , testCase "dotprod" $ do { res <- fpAaf "test/examples/dotprod.🍏" [1,2,3] [2,4,6] ; res @?= 28 }
    , testCase "euclidean" $ do { res <- fpAaf "test/examples/dist.🍎" [0,0,0] [3,4,5] ; res @?= sqrt 50 }
    , testCase "twoSum" $ do { res <- fpAaf "test/data/twoSum.🍎" [1,2,3] [2,4,5] ; res @?= 17 }
    , testCase "b" $ do { res <- jitB [1,2,3] [2,4,6] ; res @?= 2 }
    , testCase "ramanujan" $ do { res <- fpFf "test/examples/ramanujanFact.🍎" 7 ; res ≈ 5040 }
    , testCase "foldl" $ do { res <- fpAf "test/data/cfLeft.🍏" (4:replicate 5 8); res ≈ sqrt 17 }
    , testCase "erf" $ do { res <- erfJit 2 ; res .?= erf 2 }
    , testCase "f11" $ do { res <- f11 1 ; res @?= hypergeometric [1] [3/2] 1 }
    , testCase "hypergeo" $ do { res <- fpAaff "math/hypergeometric.🍏" [1] [3/2] 1; res @?= hypergeometric [1] [3/2] 1 }
    , testCase "ncdf" $ do { res <- ncdfJit 2 ; res .?= ncdf 2 }
    , testCase "bessel1" $ do { res <- fpIff "math/bessel.🍏" 1 3 ; res @?= bessel1 1 3 }
    , testCase "fcdf" $ do { res <- fpFfff "math/fcdf.🍎" 5 2 2 ; res @?= 0.6339381452606089 }
    , testCase "chi-squared cdf" $ do { res <- fpFff "math/chisqcdf.🍎" 2 2 ; res @?= chisqcdf 2 2 }
    , testCase "tcdf" $ do { res <- fpFff "math/tcdf.🍎" 2 12 ; res @?= tcdf 12 2 }
    , testCase "gen." $ do { res <- fpFfa "test/data/gen.🍎" 1 (sqrt 2) ; last (hsTup <$> res) @?= (1.1981402347355923 :: Double, 1.1981402347355923 :: Double ) }
    , testCase "completeElliptic" $ do { res <- fpFf "math/completeElliptic.🍎" 0.8 ; res @?= completeElliptic 0.8 }
    , testCase "amgm" $ do { res <- fpFff "math/amgm.🍏" 1 (sqrt 2) ; res @?= agm 1 (sqrt 2) }
    , testCase "maxscan" $ do { res <- aaFp "bench/apple/scanmax.🍏" [4::Int,6,1] ; res @?= [0::Int,4,6,6] }
    , testCase "array of floats" $ do { res <- fpAf "test/data/farr.🍎" [3, 6, 9] ; res @?= 36 }
    , testCase "scan" $ do { res <- scan 4 ; res @?= [0,1,3,6,10] }
    , testCase "map/alloc" $ do { res <- sSq 25 ; res @?= [ i^(2::Int) | i <- [0..25] ] }
    , testCase "7-day sliding average" $ do { res <- aaFp "test/examples/weekMean.🍎" [0..7::Double] ; res @?= [3,4::Double] } -- 7 (+/%#) \ (i.8)
    , testCase "A (elliptic fourier)" $ do { res <- fpAaf "test/data/A.🍏" [0,4,4::Double] [0,0,3::Double]; res @?= 2.5000000000000004 }
    , testCase "coeffs (elliptic fourier)" $ do { res <- fpAait "test/examples/coeffs.🍎" [0,4,4::Double] [0,0,3::Double] 2; res @?= (-0.288765,-0.026324,0.106387,0.342212) }
    ]

(≈) :: (Show a, Ord a, Floating a) => a -> a -> Assertion
x ≈ y = assertBool ("expected " ++ show y ++ ", got " ++ show x) ((x-y)/y<1e-4&&(y-x)/y<1e-4)

scan i = do
    f <- ia.snd <$> funP "[(+) /\\o 0 (irange 1 x 1)]"
    asI (f i)

sSq i = do
    f <- ia.snd <$> funP "[(^2)'1 (irange 0 x 1)]"
    asI (f i)

asI :: Ptr (Apple Int) -> IO [Int]
asI = asN

asN :: Storable a => Ptr (Apple a) -> IO [a]
asN = fmap (\(AA _ _ xs) -> xs) . peek

aaaFp fp xs ys =
    let xA = AA 1 [fromIntegral (length xs)] xs
        yA = AA 1 [fromIntegral (length ys)] ys
    in
    wA xA $ \pX ->
        wA yA $ \pY -> do
            f <- fmap (aaa.snd) . funP =<< BSL.readFile fp
            asN (f pX pY)

aaFp fp xs =
    let xA = AA 1 [fromIntegral(length xs)] xs in
    wA xA $ \p -> do
        f <- fmap (aa.snd) . funP =<< BSL.readFile fp
        asN (f p)

tyS :: BSL.ByteString -> TestTree
tyS s = testCase "(expr)" $
    case tyExpr s of
        Left err -> assertFailure(show err)
        Right{}  -> assertBool "passed" True

tyF :: FilePath -> TestTree
tyF fp = testCase fp $ do
    res <- tyExpr <$> BSL.readFile fp
    case res of
        Left err -> assertFailure (show err)
        Right{}  -> assertBool "Passes" True

rfTest :: TestTree
rfTest = testCase "rising factorial" $ do
    res <- jitRF 5 15
    res @?= 5068545850368000

fpAf :: FilePath -> [Double] -> IO Double
fpAf fp xs = do
    f <- bytesE <$> BSL.readFile fp
    jitAf f xs

jitEntropy = fpAf "test/examples/entropy.🍏"
jitKl = fpAaf "test/examples/kl.🍎"
jitB = fpAaf "test/examples/b.🍎"

fpFaf :: FilePath -> Double -> [Double] -> IO Double
fpFaf fp x ys = do
    f <- bytesE <$> BSL.readFile fp
    jitFaf f x ys

fpAait :: FilePath -> [Double] -> [Double] -> Int -> IO (Double, Double, Double, Double)
fpAait fp xs ys n = do
    f <- fmap snd.funP =<< BSL.readFile fp
    let a=AA 1 [fromIntegral(length xs)] xs; b=AA 1 [fromIntegral(length ys)] ys
    wA a $ \p -> wA b $ \q -> do
        hs4 <$> peek (aait f p q n)

fpAaf :: FilePath -> [Double] -> [Double] -> IO Double
fpAaf fp xs ys = do
    f <- fmap snd.funP =<< BSL.readFile fp
    jitAaf f xs ys

fpAaff :: FilePath -> [Double] -> [Double] -> Double -> IO Double
fpAaff fp xs ys z = do {f <- bytesE <$> BSL.readFile fp; jitAaff f xs ys z}

jitAaff :: BS.ByteString -> [Double] -> [Double] -> Double -> IO Double
jitAaff code xs ys z =
    let a = AA 1 [fromIntegral(length xs)] xs
        b = AA 1 [fromIntegral(length ys)] ys in
    wA a $ \p -> wA b $ \q -> do
        (fp,_) <- bsFp code
        pure $ aaff fp p q z

jitAaf :: FunPtr (Ptr (Apple Double) -> Ptr (Apple Double) -> Double) -> [Double] -> [Double] -> IO Double
jitAaf fp xs ys =
    let a = AA 1 [fromIntegral(length xs)] xs
        b = AA 1 [fromIntegral(length ys)] ys in
    wA a $ \p -> wA b $ \q -> do
        pure $ aaf fp p q

jitFaf :: BS.ByteString -> Double -> [Double] -> IO Double
jitFaf code x ys =
    let a = AA 1 [fromIntegral (length ys)] ys in
    wA a $ \p -> do
        (fp,_) <- bsFp code
        pure $ faf fp x p

jitAf :: BS.ByteString -> [Double] -> IO Double
jitAf code xs =
    let a = AA 1 [fromIntegral(length xs)] xs in
    wA a $ \p -> do
        (fp,_) <- bsFp code
        pure $ af fp p

jitE :: Double -> IO Double
jitE x = do
    (_, fp) <- funP "[e:x]"
    pure $ ff fp x

jitExp :: Int64 -> Double -> IO Double
jitExp = fpIff "test/examples/exp.🍏"

fpFf :: FilePath -> Double -> IO Double
fpFf fp x = do
    (_, f) <- funP =<< BSL.readFile fp
    pure $ ff f x

fpIff :: FilePath -> Int64 -> Double -> IO Double
fpIff fp x y = do
    (_, f) <- funP =<< BSL.readFile fp
    pure $ iff f x y

fpFfa :: Storable a => FilePath -> Double -> Double -> IO [a]
fpFfa fp x y = do
    (_, f) <- funP =<< BSL.readFile fp
    asN (ffa f x y)

fpFff :: FilePath -> Double -> Double -> IO Double
fpFff fp x y = do
    (_, f) <- funP =<< BSL.readFile fp
    pure $ fff f x y

fpFfff :: FilePath -> Double -> Double -> Double -> IO Double
fpFfff fp x y z = do
    (_, f) <- funP =<< BSL.readFile fp
    pure $ ffff f x y z

gammaJit = fpFf "math/gammaln.🍏"
ncdfJit = fpFf "math/ncdf.🍎"

erfJit :: Double -> IO Double
erfJit = fpFf "math/erf.🍏"

f11 :: Double -> IO Double
f11 = fpFf "test/examples/hypergeometricEfficient.🍏"

jitFact :: Double -> IO Double
jitFact = fpFf "test/examples/ffact.🍎"

jitRF :: Int -> Int -> IO Int
jitRF m n = do
    (_, fp) <- funP =<< BSL.readFile "test/examples/risingFactorial.🍎"
    pure $ runRF fp m n

wA :: Storable a => Apple a -> (Ptr (Apple a) -> IO b) -> IO b
wA x act =
    allocaBytes (sizeOf x) $ \p ->
        poke p x *> act p

bytesE = either throw id . bytes

foreign import ccall "dynamic" af :: FunPtr (Ptr (Apple a) -> Double) -> Ptr (Apple a) -> Double
foreign import ccall "dynamic" faf :: FunPtr (Double -> Ptr (Apple a) -> Double) -> Double -> Ptr (Apple a) -> Double
foreign import ccall "dynamic" aaf :: FunPtr (Ptr (Apple a) -> Ptr (Apple a) -> Double) -> Ptr (Apple a) -> Ptr (Apple a) -> Double
foreign import ccall "dynamic" aaff :: FunPtr (Ptr (Apple a) -> Ptr (Apple a) -> Double -> Double) -> Ptr (Apple a) -> Ptr (Apple a) -> Double -> Double
foreign import ccall "dynamic" ff :: FunPtr (Double -> Double) -> Double -> Double
foreign import ccall "dynamic" fff :: FunPtr (Double -> Double -> Double) -> Double -> Double -> Double
foreign import ccall "dynamic" ffff :: FunPtr (Double -> Double -> Double -> Double) -> Double -> Double -> Double -> Double
foreign import ccall "dynamic" ffa :: FunPtr (Double -> Double -> Ptr (Apple a)) -> Double -> Double -> Ptr (Apple a)
foreign import ccall "dynamic" iff :: FunPtr (Int64 -> Double -> Double) -> Int64 -> Double -> Double
foreign import ccall "dynamic" runRF :: FunPtr (Int -> Int -> Int) -> (Int -> Int -> Int)
foreign import ccall "dynamic" ia :: FunPtr (Int -> Ptr (Apple a)) -> Int -> Ptr (Apple a)
foreign import ccall "dynamic" aa :: FunPtr (Ptr (Apple a) -> Ptr (Apple b)) -> Ptr (Apple a) -> Ptr (Apple b)
foreign import ccall "dynamic" aaa :: FunPtr (Ptr (Apple a) -> Ptr (Apple b) -> Ptr (Apple c)) -> Ptr (Apple a) -> Ptr (Apple b) -> Ptr (Apple c)
foreign import ccall "dynamic" aait :: FunPtr (Ptr (Apple a) -> Ptr (Apple a) -> Int -> Ptr (P4 a b c d)) -> Ptr (Apple a) -> Ptr (Apple a) -> Int -> Ptr (P4 a b c d)
